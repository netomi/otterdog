name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
      version-fragment:
        description: 'Version fragment to increase for next development cycle'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
          - none

env:
  BOT_USER_NAME: eclipse-csi-bot
  BOT_EMAIL: csi-bot@eclipse.org
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.4'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  precheck:
    runs-on: ubuntu-22.04
    if: github.repository == 'eclipse-csi/otterdog'
    steps:
      - name: "Check ref"
        shell: bash
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "Release shall only be made from 'main' branch, triggered branch '${{ github.ref_name }}', aborting."
            exit 1
          fi

  release:
    runs-on: ubuntu-22.04
    needs: ['precheck']
    permissions:
      contents: write
    outputs:
      release-version: ${{ steps.prepare-release.outputs.RELEASE_VERSION }}
      release-tag: ${{ steps.prepare-release.outputs.RELEASE_TAG }}
    steps:
      - name: "Setup Bot User"
        run: |
          git config --global user.name '${{ env.BOT_USER_NAME }}'
          git config --global user.email '${{ env.BOT_EMAIL }}'

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1.3
        with:
          virtualenvs-in-project: true
          version: ${{ env.POETRY_VERSION }}

      - name: "Install dependencies"
        run: poetry install -v --without dev,typing,docs

      - name: "Run tests"
        run: |
          source $VENV
          pytest -rs tests

      - name: "Prepare release"
        id: prepare-release
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}
        run: |
          PROJECT_VERSION="$(poetry version -s)"

          echo "PROJECT_VERSION=$(echo $PROJECT_VERSION)" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          echo "Project version: $PROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"

          if git show-ref --tags --verify --quiet "refs/tags/v${RELEASE_VERSION}"; then
            echo "Release Tag 'v${RELEASE_VERSION}' already exists, aborting."
            exit 1
          fi

          if [ "$PROJECT_VERSION" != "$RELEASE_VERSION" ]; then
            poetry version $RELEASE_VERSION
            git commit -a -m "Releasing version $RELEASE_VERSION"
            git push origin ${{ github.ref }}
          fi

          echo "RELEASE_TAG=v$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: "Tag release"
        id: tag-release
        shell: bash
        run: |
          git tag ${{ steps.prepare-release.outputs.RELEASE_TAG }}
          git push origin --tags

#  build-and-push-image:
#    runs-on: ubuntu-22.04
#    needs: ['release']
#    permissions:
#      packages: write
#    steps:
#      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
#        with:
#          ref: ${{ needs.release.outputs.release-tag }}
#
#      - name: "Log in to the Container registry"
#        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: "Extract metadata (tags, labels) for Docker"
#        id: meta
#        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
#        with:
#          tags: |
#            ${{ needs.release.outputs.release-version }}
#          labels: |
#            org.opencontainers.image.version=${{ needs.release.outputs.release-version }}
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#
#      - name: "Build and push Docker image"
#        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
#        with:
#          context: .
#          file: docker/Dockerfile
#          push: true
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.release-version }}
#          labels: ${{ steps.meta.outputs.labels }}

  build-dist:
    runs-on: ubuntu-22.04
    needs: ['release']
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ needs.release.outputs.release-tag }}

      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1.3
        with:
          virtualenvs-in-project: true
          version: ${{ env.POETRY_VERSION }}

      - name: "Install dependencies"
        run: poetry install --only=main

      - name: "Build package"
        run: poetry build

      - name: "Generate hashes"
        id: hash
        run: |
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

      - name: "Upload dist"
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: "dist"
          path: "dist/"
          if-no-files-found: error
          retention-days: 5

  provenance:
    needs: ['build-dist']
    permissions:
      actions: read
      contents: write
      id-token: write # Needed to access the workflow's OIDC identity.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build-dist.outputs.hashes }}"
      upload-assets: true

  github-publish:
    runs-on: ubuntu-22.04
    needs: ['build-dist', 'provenance']
    steps:
      - name: "Download dists"
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: "dist"
          path: "dist/"

      - name: "Upload dists to GitHub Release"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          gh release upload ${{ needs.release.outputs.release-tag }} dist/* --repo ${{ github.repository }}

  pypi-publish:
    runs-on: ubuntu-22.04
    needs: ['build-dist', 'provenance']
    environment:
      name: pypi
      url: https://pypi.org/p/otterdog
    permissions:
      id-token: write
    steps:
      - name: "Download dists"
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: "dist"
          path: "dist/"

      - name: "Publish dists to PyPI"
        uses: pypa/gh-action-pypi-publish@0ab0b79471669eb3a4d647e625009c62f9f3b241 # v1.10.1
        with:
          attestations: true

  prepare-for-next-development-cycle:
    runs-on: ubuntu-22.04
    needs: ['precheck', 'release', 'pypi-publish', 'github-publish']
    permissions:
      contents: write
    if: ${{ github.event.inputs.version-fragment != 'none' }}
    steps:
      - name: Setup Git User
        run: |
          git config --global user.name '${{ env.BOT_USER_NAME }}'
          git config --global user.email '${{ env.BOT_EMAIL }}'

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1.3
        with:
          virtualenvs-in-project: true
          version: 1.7.1

      - name: Update next development version
        env:
          VERSION_FRAGMENT: ${{ github.event.inputs.version-fragment }}
        run: |
          NEXT_VERSION="$(poetry version ${VERSION_FRAGMENT} -s)"
          poetry version "$NEXT_VERSION".dev0

          git commit -a -m "Prepare for next development cycle"
          git push origin ${{ github.ref }}
